openapi: 3.0.0
info:
  title: API de Tareas
  description: API para gestionar tareas con autenticación JWT
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
paths:
  /auth/login:
    post:
      operationId: loginUser
      tags:
        - "Authorization"
      summary: login
      description: Inicia sesión con credenciales de usuario.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: JWT generado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: error ocurrido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: acceso denegado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: error interno server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /task:
    get:
      operationId: getAllTasks
      tags:
        - "Task"
      summary: Listar todas las tareas
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Listado de tarea
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
        '400':
          description: error ocurrido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: error interno server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createTask
      tags:
        - "Task"
      summary: Crear una nueva tarea
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
      responses:
        '200':
          description: Tarea creada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskSaveResponse'
        '403':
          description: acceso denegado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: error ocurrido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: error interno server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /task/{id}:
    get:
      operationId: getTaskById
      tags:
        - "Task"
      summary: Obtener detalles de una tarea
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Lista de tareas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: error ocurrido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: sin registro
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: acceso denegado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: error interno server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      operationId: updateTaskById
      tags:
        - "Task"
      summary: Actualizar  tarea
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: 'id de tarea'
          schema:
            type: integer
          example: '1'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
      responses:
        '200':
          description: Tarea actualizada
        '400':
          description: error ocurrido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: acceso denegado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: error interno server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteTaskById
      tags:
        - "Task"
      summary: Eliminar una tarea
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: 'id de tarea'
          schema:
            type: integer
      responses:
        '200':
          description: Tarea eliminada
        '400':
          description: error ocurrido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: acceso denegado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: error interno server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



components:
  schemas:

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          description:  "id usuario"
          example:  "1"
        name:
          type: string
          description:  "nombre de usuario"
          example:  "user123"




    TaskSaveResponse:
      type: object
      properties:
        id:
          type: integer
          description: "id tarea"
          example: "1"
        description:
          type: string
          description: "descripcion tarea"
          example: "tarea nueva"

    TaskResponse:
      type: object
      properties:
        id:
          type: integer
          description:  "id tarea"
          example:  "1"
        description:
          type: string
          description:  "descripcion tarea"
          example:  "tarea nueva"
        user:
          $ref: '#/components/schemas/UserResponse'
        state:
          type: string
          description:  "estado tarea"
          example:  "ACTIVED"



    UserRequest:
      type: object
      properties:
        user_name:
          type: string
          description:  "user name not null"
          example:  "user123"
        password:
          type: string
          description:  "password not null"
          example:  "password"
      required:
        - user_name
        - password

    TaskRequest:
      type: object
      properties:
        description:
          type: string
          description: "description not null"
          example:  "nueva tarea"
        state_id:
          type: integer
          description: "state id not null"
          example: "1"
      required:
        - state_id
        - description





    Notification:
      type: object
      properties:
        message:
          type: string
          description: "Mensaje de error"
          example: "Parámetros inválidos"
        status_code:
          type: integer
          description: "codigo de estatus http"
          example:  "400"




    ErrorResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'




    TokenResponse:
      type: object
      properties:
        token:
          type: string
          description:  "token generado"
          example:  "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJtYXRlbyIsImlhdCI6MTc0MTkyNjI4OCwiZXhwIjoxNzQxOTI5ODg4fQ.BojIDE5MFa12H27c7wYx1eW6C8pk47Cze68MWgDMcEQ"
        expires_in:
          type: integer
          format: int64
          description:  "token generado"
          example: 3600000


  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT



